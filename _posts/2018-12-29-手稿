################################   2018-09-03  #################################
1.saas 目前有子系统 ：access权限系统 config配置系统 bas监控系统 （PMS系统 for hotel）
2.服务器端开发 子系统 服务大概有 gateway网关 center 中心 access权限 device配置 bas
监控 diagonosis 诊断 data 消息队列

################################  2018-09-04  ##################################
aliyun:47.52.196.69
root / forgeeks19950526

gitlab ：  hechao / forgeeks19950526

email : chao.he@lumiunited.com  / Forgeeks19950526

lumi-wiki : JamesGosling / JamesGosling

lasspwd ： forgeekscn@gmail.com / he19950526

################################  2018-09-05  ##################################
绿米账号 : 13720308660 / forgeeks19950526
服务商账号 : forgeekscn@gmail.com / forgeeks19950526
##################################################################
5fc674fc37b3146e
http://nqxbf9.natappfree.cc

--- wx-app

appid: wx034ecb96a1ba4228
secret: 226a1dda175c395335e28f7fa4f06646

#####################################################################
dockerhub 账号密码
forgeeks / forgeeks19950526



解压
解压的文件夹整个给777权限
运行 install.sh
安装完之后  TRLogin -C 192.168.100.7 5001     （注意C是大写的）
重启电脑


#######################################################


1.调用穿参params
2.mp和app哪些地方要调用pc推送


1.  area表 - 烤炉删除u带来的影响
2. 身份证有效期




##############################################################

测试录权限的账号:
18652499891
123456
生产录权限的账号:
13670099361
zs1220

#######################################################################################

++++++++++++  rabbit-mq   +++++++++++

stop restart  => rabbitmq-server –detached   /  rabbitmqctl stop

check status => rabbitmqctl status  / rabbitmqctl list_queues  / rabbitmqctl list_exchanges /
                rabbitmqctl list_bindings /rabbitmqctl list_connections / rabbitmqctl  list_channels

clear queues => rabbitmqctl reset

add user => sudo rabbitmqctl  add_user  hechao hechao

add permission => sudo rabbitmqctl  set_user_tags  hechao administrator

config file location => /etc/rabbitmq/rabbitmq.conf  /etc/rabbitmq/rabbitmq-env.conf

port => app:5672 web:15672

user-pwd localhost => hechao/hechao

config plugins => rabbitmq-plugins enable rabbitmq_management

usual config:

env.conf =>

RABBITMQ_NODE_IP_ADDRESS= //IP地址，空串bind所有地址，指定地址bind指定网络接口

RABBITMQ_NODE_PORT=       //TCP端口号，默认是5672

RABBITMQ_NODENAME=        //节点名称。默认是rabbit

RABBITMQ_CONFIG_FILE= //配置文件路径 ，即rabbitmq.config文件路径

RABBITMQ_MNESIA_BASE=     //mnesia所在路径

RABBITMQ_LOG_BASE=        //日志所在路径

RABBITMQ_PLUGINS_DIR=     //插件所在路径

rabbitmq.config =>

tcp_listerners    #设置rabbimq的监听端口，默认为[5672]。

disk_free_limit     #磁盘低水位线，若磁盘容量低于指定值则停止接收数据，默认值为{mem_relative, 1.0},即与内存相关联1：1，也可定制为多少byte.

vm_memory_high_watermark    #设置内存低水位线，若低于该水位线，则开启流控机制，默认值是0.4，即内存总量的40%。

hipe_compile     #将部分rabbimq代码用High Performance Erlang compiler编译，可提升性能，该参数是实验性，若出现erlang vm segfaults，应关掉。

force_fine_statistics    #该参数属于rabbimq_management，若为true则进行精细化的统计，但会影响性能。

frame_max     #包大小，若包小则低延迟，若包则高吞吐，默认是131072=128K。

heartbeat     #客户端与服务端心跳间隔，设置为0则关闭心跳，默认是600秒。

+++++++++++  mysql ++++++++++++

check is running => sudo netstat -tap | grep mysql

base operate => sudo service mysql restart/start/stop

ubuntu change pwd => sudo vim /etc/mysql/debian.cnf

local pwd => root/root


+++++++++   myth  +++++++++++++++++

test swager page => http://localhost:8884/swagger-ui.html#!/order-controller/orderPayUsingPOST

rabbit mq admin page => http://localhost:15672/#/

admin page => http://localhost:8888/myth-admin/index.html



input {  stdin{} output {  elasticsearch { 	host => 127.0.0.1  } stdout {  codec => rubydebug }}


##############################################################

1.电商下订单高并发场景

缓存队列
响应时间
吞吐量
数据一致性


2.


+++++++++++++++++++++++++++++++++++++++

1.数据库脚本整理
2.配置接口测试优化补充
3.联调
4.考虑 redis es kafka rabbitmq 的数据分片原理的共同点和不同点



+++++++++++++++++++++++++++++++++++++++

考虑 redis es kafka rabbitmq 的数据分片原理的共同点和不同点

1.redis安装目录 ： /usr/local/redis-cluster/redis-5.0.3
2.redis启动脚本：
    cd ../node-1 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    cd ../node-2 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    cd ../node-3 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    cd ../node-4 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    cd ../node-5 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    cd ../node-6 &&  sudo ../redis-5.0.3/src/redis-server redis.conf
    ps -ef | grep redis-server
    sudo redis-5.0.3/src/redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006  --cluster-replicas 1
3.连接redis： redis-5.0.3/src/redis-cli -c -p 7001
4.redis-cluster 的 set get sync reshard 的过程




+++++++++++++++++++++++++++++++++++++++

1.awk灵活使用 ： ps -ef |grep redis-server  | awk '/cluster/{print$2}' |xargs  kill -9

2.构建线程池 ：
    /**
     * 线程池的基本大小
     */
    public static int corePoolSize = 10;
    /**
     * 线程池最大数量
     */
    public static int maximumPoolSizeSize = 100;
    /**
     * 线程活动保持时间
     */
    public static long keepAliveTime = 1;
    /**
     * 任务队列
     */
    public static LinkedBlockingQueue workQueue = new LinkedBlockingQueue();

    public static ThreadPoolExecutor pool;

    static {
        pool = new ThreadPoolExecutor(
                corePoolSize,
                maximumPoolSizeSize,
                keepAliveTime,
                TimeUnit.SECONDS,
                workQueue,
                new ThreadFactoryBuilder().setNameFormat("PIC-DOWNLOADER-%d").build());
    }

3.各个中间件数据分片原理：
    redis： 16K个hashslot分配到各个master节点 ，master写slave读，每秒同步一次，不同key存储到不同hashslot，master节点宕机那么他的slave会成为mater

 4.计算redis nodes hashslot数量
    redis-5.0.3/src/redis-cli -c -p 7001 cluster nodes | grep master | awk '//{print$2 ,$9}'

5.stream常用
    Map<Integer , List<DesignPicResultRto>> map =  list.stream().collect(Collectors.groupingBy(DesignPicResultRto::getPicType,TreeMap::new, Collectors.toList()));

6.清理节点才能加入
    flushall && cluster reset exit

7.增删redis集群节点
    redis-5.0.3/src/redis-cli --cluster add-node 127.0.0.1:7002  127.0.0.1:7001
    redis-5.0.3/src/redis-cli --cluster del-node 127.0.0.1:7002 bd64b831c5fb0a19fe357fc7eef00cfe41c2734d


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1.各个中间件数据分片原理：
    redis： 16K个hashslot分配到各个master节点 ，master写slave读，每秒同步一次，不同key存储到不同hashslot，master节点宕机那么他的slave会成为mater
    es :

2.sql补充if的使用 ： SELECT IF(500<1000, 5, 10);



3.es-luster集群路径/usr/local/es-cluster/


4.elastic集群配置
cluster.name: es-cluster
node.name: node-2
path.data: ./data
path.logs: ./logs
network.host: 0.0.0.0
http.port: 9202
xpack.ml.enabled: false

5.查看集群状态
curl -X GET 'http://localhost:9201/_nodes?pretty'

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1.house_type_name
2.商品条码非必填

++++++++++++++  rabbit mq    +++++++++++++++++++
1.配置启动 X3
RABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [{port,15672}]" RABBITMQ_NODENAME=node rabbitmq-server -detached

2 加入集群
 rabbitmqctl -n node stop_app
  rabbitmqctl -n node-2 reset
  rabbitmqctl -n node join_cluster node-2@Lumi
  rabbitmqctl -n node start_app

3.开启web插件./rabbitmq-plugins enable rabbitmq_management

4.查看
chen@Lumi:~$ sudo  rabbitmqctl -n node-3 cluster_status
Cluster status of node 'node-3@Lumi' ...
[{nodes,[{disc,['node-2@Lumi','node-3@Lumi','node-4@Lumi']}]},
{running_nodes,['node-2@Lumi','node-4@Lumi','node-3@Lumi']},
{cluster_name,<<"node-2@Lumi">>},
{partitions,[]}]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1. 安装kubectl
➜ git clone https://github.com/kubernetes/kubernetes.git
➜ cd kubernetes
➜ make
➜ sudo cp _output/bin/kubectl /usr/local/bin/
➜ sudo chmod +x /usr/local/bin/kubectl




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2.模拟一个rabbit高并发场景



3.模拟一个redis高并发场景
4.模拟一个elasticsearch高并发场景


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



1. dw-market : forgeeks / Forgeeks19950526




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


## github首页全绿攻略 turn-fucking-green-now

#### 步骤
- [x] 进入项目目录 新建test.txt
- [x] 写批处理命令 将下面代码写入test.bat
- [x] 进入命令行运行 test.bat 文件
```javascript
@echo off
:start
set /a var+=1
echo a >> test.txtgit 
git add .
git commit --date=" April %var% 9:05:20 2016 +0800" -am "turns fucking green"
if %var% leq 30 GOTO start
git push origin master
@echo Mission finished !
```
#### 用法
- [x] %var% 代表日期变量 倒数第三行的30代表日期%var%会从1遍历到31
- [x] 如果想让16年2月全绿 你可以把上面倒数第四行April改成February 二月只有28天 那么倒数第三行30就改成27
- [x] 第三行的set /a var+=1表示变量每次自增1 你可以把1改成3 这样就不是全绿
- [x] 提交次数越多绿色越深 如果想每天提交两次 那就 把第4 5 6行复制粘贴在第6行之后 以此类推

#### 联系我
- [x]  forgeekscn@gmail.com

 


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++










+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++






 


## 高并发架构

### [消息队列](/docs/high-concurrency/mq-interview.md)
- [为什么使用消息队列？消息队列有什么优点和缺点？Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么优点和缺点？](/docs/high-concurrency/why-mq.md)
- [如何保证消息队列的高可用？](/docs/high-concurrency/how-to-ensure-high-availability-of-message-queues.md)
- [如何保证消息不被重复消费？（如何保证消息消费时的幂等性）](/docs/high-concurrency/how-to-ensure-that-messages-are-not-repeatedly-consumed.md)
- [如何保证消息的可靠性传输？（如何处理消息丢失的问题）](/docs/high-concurrency/how-to-ensure-the-reliable-transmission-of-messages.md)
- [如何保证消息的顺序性？](/docs/high-concurrency/how-to-ensure-the-order-of-messages.md)
- [如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？](/docs/high-concurrency/mq-time-delay-and-expired-failure.md)
- [如果让你写一个消息队列，该如何进行架构设计啊？说一下你的思路。](/docs/high-concurrency/mq-design.md)

### [搜索引擎](/docs/high-concurrency/es-introduction.md)
- [es 的分布式架构原理能说一下么（es 是如何实现分布式的啊）？](/docs/high-concurrency/es-architecture.md)
- [es 写入数据的工作原理是什么啊？es 查询数据的工作原理是什么啊？底层的 lucene 介绍一下呗？倒排索引了解吗？](/docs/high-concurrency/es-write-query-search.md)
- [es 在数据量很大的情况下（数十亿级别）如何提高查询效率啊？](/docs/high-concurrency/es-optimizing-query-performance.md)
- [es 生产集群的部署架构是什么？每个索引的数据量大概有多少？每个索引大概有多少个分片？](/docs/high-concurrency/es-production-cluster.md)

### 缓存
- [在项目中缓存是如何使用的？缓存如果使用不当会造成什么后果？](/docs/high-concurrency/why-cache.md)
- [Redis 和 Memcached 有什么区别？Redis 的线程模型是什么？为什么单线程的 Redis 比多线程的 Memcached 效率要高得多？](/docs/high-concurrency/redis-single-thread-model.md)
- [Redis 都有哪些数据类型？分别在哪些场景下使用比较合适？](/docs/high-concurrency/redis-data-types.md)
- [Redis 的过期策略都有哪些？手写一下 LRU 代码实现？](/docs/high-concurrency/redis-expiration-policies-and-lru.md)
- [如何保证 Redis 高并发、高可用？Redis 的主从复制原理能介绍一下么？Redis 的哨兵原理能介绍一下么？](/docs/high-concurrency/how-to-ensure-high-concurrency-and-high-availability-of-redis.md)
- [Redis 的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？](/docs/high-concurrency/redis-persistence.md)
- [Redis 集群模式的工作原理能说一下么？在集群模式下，Redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？如何动态增加和删除一个节点？](/docs/high-concurrency/redis-cluster.md)
- [了解什么是 Redis 的雪崩和穿透？Redis 崩溃之后会怎么样？系统该如何应对这种情况？如何处理 Redis 的穿透？](/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md)
- [如何保证缓存与数据库的双写一致性？](/docs/high-concurrency/redis-consistence.md)
- [Redis 的并发竞争问题是什么？如何解决这个问题？了解 Redis 事务的 CAS 方案吗？](/docs/high-concurrency/redis-cas.md)
- [生产环境中的 Redis 是怎么部署的？](/docs/high-concurrency/redis-production-environment.md)

### 分库分表
- [为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？](/docs/high-concurrency/database-shard.md)
- [现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？](/docs/high-concurrency/database-shard-method.md)
- [如何设计可以动态扩容缩容的分库分表方案？](/docs/high-concurrency/database-shard-dynamic-expand.md)
- [分库分表之后，id 主键如何处理？](/docs/high-concurrency/database-shard-global-id-generate.md)

### 读写分离
- [如何实现 MySQL 的读写分离？MySQL 主从复制原理是啥？如何解决 MySQL 主从同步的延时问题？](/docs/high-concurrency/mysql-read-write-separation.md)

### 高并发系统
- [如何设计一个高并发系统？](/docs/high-concurrency/high-concurrency-design.md)

## 分布式系统

### [面试连环炮](/docs/distributed-system/distributed-system-interview.md)
### 系统拆分
- [为什么要进行系统拆分？如何进行系统拆分？拆分后不用 Dubbo 可以吗？](/docs/distributed-system/why-dubbo.md)

### 分布式服务框架
- [说一下 Dubbo 的工作原理？注册中心挂了可以继续通信吗？](/docs/distributed-system/dubbo-operating-principle.md)
- [Dubbo 支持哪些序列化协议？说一下 Hessian 的数据结构？PB 知道吗？为什么 PB 的效率是最高的？](/docs/distributed-system/dubbo-serialization-protocol.md)
- [Dubbo 负载均衡策略和集群容错策略都有哪些？动态代理策略呢？](/docs/distributed-system/dubbo-load-balancing.md)
- [Dubbo 的 spi 思想是什么？](/docs/distributed-system/dubbo-spi.md)
- [如何基于 Dubbo 进行服务治理、服务降级、失败重试以及超时重试？](/docs/distributed-system/dubbo-service-management.md)
- [分布式服务接口的幂等性如何设计（比如不能重复扣款）？](/docs/distributed-system/distributed-system-idempotency.md)
- [分布式服务接口请求的顺序性如何保证？](/docs/distributed-system/distributed-system-request-sequence.md)
- [如何自己设计一个类似 Dubbo 的 rpc 框架？](/docs/distributed-system/dubbo-rpc-design.md)

### 分布式锁
- [Zookeeper 都有哪些应用场景？](/docs/distributed-system/zookeeper-application-scenarios.md)
- [使用 Redis 如何设计分布式锁？使用 Zookeeper 来设计分布式锁可以吗？以上两种分布式锁的实现方式哪种效率比较高？](/docs/distributed-system/distributed-lock-redis-vs-zookeeper.md)

### 分布式事务
- [分布式事务了解吗？你们如何解决分布式事务问题的？TCC 如果出现网络连不通怎么办？XA 的一致性如何保证？](/docs/distributed-system/distributed-transaction.md)

### 分布式会话
- [集群部署时的分布式 Session 如何实现？](/docs/distributed-system/distributed-session.md)

## 高可用架构
- [Hystrix 介绍](/docs/high-availability/hystrix-introduction.md)
- [电商网站详情页系统架构](/docs/high-availability/e-commerce-website-detail-page-architecture.md)
- [Hystrix 线程池技术实现资源隔离](/docs/high-availability/hystrix-thread-pool-isolation.md)
- [Hystrix 信号量机制实现资源隔离](/docs/high-availability/hystrix-semphore-isolation.md)

### 高可用系统
- 如何设计一个高可用系统？

### 限流
- 如何限流？在工作中是怎么做的？说一下具体的实现？

### 熔断
- 如何进行熔断？
- 熔断框架都有哪些？具体实现原理知道吗？

### 降级
- 如何进行降级？




 





